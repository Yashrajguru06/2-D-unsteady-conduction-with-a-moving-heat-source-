clc,clear all
clc, clear all

% Parameters
L = 150; % length of the square domain
t_final = 8; % simulation time
n = 300; % number of grid points in each direction
dx = L/n; % grid spacing
dt = 0.01; % time step size
k = 1; % thermal conductivity
T_init = 0; % initial temperature
T_source = 1; % temperature of the heat source
source_speed = 50; % speed of the heat source

% Create a mask for the heat source
[X, Y] = meshgrid((1:n)*dx, (1:n)*dx);
source_mask = (X >= L/3 & X <= 2*L/3) & (Y >= L/3 & Y <= 2*L/3); % square mask
angle = 0;
source_mask = circshift(source_mask, [round(0.1*L*sin(angle)), round(0.1*L*cos(angle))]);

% Calculate the number of grid points for the diameter of the source
diameter = 2; % diameter of the heat source in cm
num_points = round(diameter/dx);

% Modify the source mask to include the circle shape
radius = num_points/2;
[x, y] = meshgrid(-(num_points-1)/2:(num_points-1)/2, -(num_points-1)/2:(num_points-1)/2);
circular_mask = (x.^2 + y.^2 <= radius^2);
source_mask = conv2(source_mask, circular_mask, 'same') > 0;

% Initial conditions
T = T_init*ones(n,n);
T_new = T;

% Set up video writer
writerObj = VideoWriter(fullfile(getenv('USERPROFILE'), 'Desktop', 'heat_source.mp4'), 'MPEG-4');
writerObj.FrameRate = 30;
open(writerObj);

% Main loop
t = 0;
while t < t_final

    % Update temperature at interior points
    for i = 2:n-1
        for j = 2:n-1
            T_new(i,j) = T(i,j) + k*dt/(dx^2)*(T(i+1,j) + T(i-1,j) + T(i,j+1) + T(i,j-1) - 4*T(i,j));
        end
    end

    % Apply Neumann boundary conditions at edges
    T_new(1,:) = T_new(2,:);
    T_new(n,:) = T_new(n-1,:);
    T_new(:,1) = T_new(:,2);
    T_new(:,n) = T_new(:,n-1);

    % Update temperature at heat source
    angle = angle + dt*source_speed;
    source_mask = circshift(source_mask, [round(0.1*L*sin(angle)), round(0.1*L*cos(angle))]);
    T_new(source_mask) = T_source;

    % Update time and temperature
    t = t + dt;
    T = T_new;

    % Plot temperature
    imagesc(T);
    colorbar;
    axis equal tight;
    title(sprintf('Time: %0.2f - Moving Square', t));
    drawnow;

    % Save frame to video file
    frame = getframe(gcf);
    writeVideo(writerObj, frame);
end

% Close video writer
close(writerObj);
